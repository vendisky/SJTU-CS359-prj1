vendis@vendis-ThinkPad-X220:~$ cd Simplescalar
vendis@vendis-ThinkPad-X220:~/Simplescalar$ simplesim-3.0/sim-profile -iclass go.ss 2 8 go.in
sim-profile: SimpleScalar/PISA Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

sim: command line: simplesim-3.0/sim-profile -iclass go.ss 2 8 go.in 

sim: simulation started @ Wed Nov 27 20:08:04 2013, options follow:

sim-profile: This simulator implements a functional simulator with
profiling support.  Run with the `-h' flag to see profiling options
available.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst                   0 # maximum number of inst's to execute
-all                    false # enable all profile options
-iclass                  true # enable instruction class profiling
-iprof                  false # enable instruction profiling
-brprof                 false # enable branch instruction profiling
-amprof                 false # enable address mode profiling
-segprof                false # enable load/store address segment profiling
-tsymprof               false # enable text symbol profiling
-taddrprof              false # enable text address profiling
-dsymprof               false # enable data symbol profiling
-internal               false # include compiler-internal symbols during symbol profiling
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)

sim: ** starting functional simulation **
Initial position from go.in
  1 B D6 
  2 W C4 
  3 B E3 
  4 W B6 
  5 B C2 
  6 W C7 
  7 B D7 
  8 W E4 
  9 B D4 
 10 W D8 
 11 B E6 
 12 W F8 
 13 B B3 
 14 W F7 
 15 B F6 
 16 W D5 
 17 B G4 
 18 W E7 
 19 B C8 
 20 W E8 
 21 B B7 
 22 W C6 
 23 B G7 
 24 W B8 
 25 B G6 
 26 W A7 
 27 B F3 
 28 W D3 
 29 B D2 
 30 W B4 
 31 B E2 
 32 W A3 
 33 B A2 
 34 W A4 
 35 B G8 
 36 W C8 
 37 B C3 
 38 W D4 
 39 B pass
 40 W pass
Game over

sim: ** simulation statistics **
sim_num_insn               31394965 # total number of instructions executed
sim_num_refs                8154766 # total number of loads and stores executed
sim_elapsed_time                  2 # total simulation time in seconds
sim_inst_rate          15697482.5000 # simulation speed (in insts/sec)

sim_inst_class_prof    # instruction class profile
sim_inst_class_prof.array_size = 7
sim_inst_class_prof.bucket_size = 1
sim_inst_class_prof.count = 7
sim_inst_class_prof.total = 31394964
sim_inst_class_prof.imin = 0
sim_inst_class_prof.imax = 7
sim_inst_class_prof.average = 4484994.8571
sim_inst_class_prof.std_dev = 6467950.4911
sim_inst_class_prof.overflows = 0
# pdf == prob dist fn, cdf == cumulative dist fn
#          index      count    pdf 
sim_inst_class_prof.start_dist
load                6175411  19.67 
store               1979355   6.30 
uncond branch        996935   3.18 
cond branch         4001737  12.75 
int computation    18241470  58.10 
fp computation            0   0.00 
trap                     56   0.00 
sim_inst_class_prof.end_dist

ld_text_base             0x00400000 # program text (code) segment base
ld_text_size                 621600 # program text (code) size in bytes
ld_data_base             0x10000000 # program initialized data segment base
ld_data_size                 578004 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base            0x7fffc000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry            0x00400140 # program entry point (initial PC)
ld_environ_base          0x7fff8000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  282 # total number of pages allocated
mem.page_mem                  1128k # total size of memory pages allocated
mem.ptab_misses                 282 # total first level page table misses
mem.ptab_accesses         145808450 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

